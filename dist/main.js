/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\"use-strict\";\nlet map;\nlet infowindow;\n// import {mapStyling} from '/map-styling.js';\n\n// listeners and call startMap\nfunction initApp() {\n    document.querySelector('#geolocate').addEventListener(\"click\", getGeoLoc);\n    document.querySelector('#location-submit-button').addEventListener(\"click\", getSearchString);\n\n    //autocomplete\n    const autoOptions = {\n        componentRestrictions: {country: \"uk\"}\n    };\n    let placeInput = document.querySelector('#location-input-field');\n    let autocomplete = new google.maps.places.Autocomplete(placeInput, autoOptions);\n\n\n\n    startMap();\n}\n\n//placeholdermap\nfunction startMap() {\n    // let mapStyling;\n\n    const mapStyling = {\n        zoom: 6,\n        center: { lat: 54.4808, lng: -4.2426 },\n        zoomControl: false,\n        mapTypeControl: false,\n        streetViewControl: false,\n        fullscreenControl: false,\n        styles: [{\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#ebe3cd\"\n                }]\n            },\n            {\n                \"elementType\": \"labels\",\n                \"stylers\": [{\n                    \"visibility\": \"off\"\n                }]\n            },\n            {\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#523735\"\n                }]\n            },\n            {\n                \"elementType\": \"labels.text.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#f5f1e6\"\n                }]\n            },\n            {\n                \"featureType\": \"administrative\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#c9b2a6\"\n                }]\n            },\n            {\n                \"featureType\": \"administrative.land_parcel\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#dcd2be\"\n                }]\n            },\n            {\n                \"featureType\": \"administrative.land_parcel\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#ae9e90\"\n                }]\n            },\n            {\n                \"featureType\": \"landscape.natural\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"poi\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"poi\",\n                \"elementType\": \"labels\",\n                \"stylers\": [{\n                    \"visibility\": \"off\"\n                }]\n            },\n            {\n                \"featureType\": \"poi\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#f23702\"\n                }]\n            },\n            {\n                \"featureType\": \"poi.park\",\n                \"elementType\": \"geometry.fill\",\n                \"stylers\": [{\n                    \"color\": \"#a5b076\"\n                }]\n            },\n            {\n                \"featureType\": \"poi.park\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#447530\"\n                }]\n            },\n            {\n                \"featureType\": \"road\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#f5f1e6\"\n                }]\n            },\n            {\n                \"featureType\": \"road\",\n                \"elementType\": \"labels\",\n                \"stylers\": [{\n                    \"visibility\": \"off\"\n                }]\n            },\n            {\n                \"featureType\": \"road.arterial\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#fdfcf8\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#f7e8c8\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#8b9acc\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway.controlled_access\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#e98d58\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway.controlled_access\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#b7c1ca\"\n                }]\n            },\n            {\n                \"featureType\": \"road.local\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#806b63\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.line\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.line\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#8f7d77\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.line\",\n                \"elementType\": \"labels.text.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#ebe3cd\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.station\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"water\",\n                \"elementType\": \"geometry.fill\",\n                \"stylers\": [{\n                    \"color\": \"#b9d3c2\"\n                }]\n            },\n            {\n                \"featureType\": \"water\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#92998d\"\n                }]\n            }\n        ]\n    }\n\n\n\n    map = new google.maps.Map(document.querySelector('#map'), mapStyling);\n\n}\n\n//geolocation\nfunction getGeoLoc() {\n    const geoLocationOptions = {\n        enableHighAccuracy: true,\n        timeout: 7000,\n        maximumAge: 0\n    };\n\n    // on success do a geocode search\n    function success(pos) {\n        let location = {\n            coords: {\n                lat: pos.coords.latitude,\n                lng: pos.coords.longitude\n            }\n        };\n        doMap(location);\n    }\n\n    //error alert in the console and to user\n    function failure(err) {\n        alert('something went wrong, please enter a location munually');\n        console.warn(`Error(${err.code}) : ${err.message}`);\n    }\n\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(success, failure, geoLocationOptions);\n    } else {\n        alert(\"geolocation not supported by your browser\");\n    }\n\n}\n\n\n//take user input\nfunction getSearchString(event) {\n    event.preventDefault();\n\n    let input = document.querySelector('#location-input-field').value;\n    // if user has entered search string then send input to geocode function\n    if (input) {\n        locationAddressSearch(input);\n    } else {\n        //if not then - then make a not in the console\n        console.log(\"input empty\");\n    }\n\n}\n\n\n// make a call to the google geocode API\nfunction locationAddressSearch(query) {\n    // axios returns a Promise - takes search parameters.\n    axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n            params: {\n                address: query,\n                key: 'AIzaSyAvGb6zn5DU74zcegK54EVvr6GMQAFdC5o'\n            }\n        })\n        .then(useLocationDetails)\n        .catch(returnsError);\n}\n\n// geocode API returns an error\nfunction returnsError(err) {\n    console.log(\"error is : \" + err);\n}\n\n\nfunction useLocationDetails(res) {\n    // pass location coordinates\n    let location = {\n        coords: res.data.results[0].geometry.location\n    };\n    // send info to map constructor\n    doMap(location);\n}\n\n\nfunction doMap(location) {\n    // console.log(\"location: \", location);\n    let options = {\n        zoom: 15,\n        center: location.coords,\n        zoomControl: false,\n        mapTypeControl: false,\n        streetViewControl: false,\n        fullscreenControl: false,\n        styles: [{\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#ebe3cd\"\n                }]\n            },\n            {\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#523735\"\n                }]\n            },\n            {\n                \"elementType\": \"labels.text.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#f5f1e6\"\n                }]\n            },\n            {\n                \"featureType\": \"administrative\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#c9b2a6\"\n                }]\n            },\n            {\n                \"featureType\": \"administrative.land_parcel\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#dcd2be\"\n                }]\n            },\n            {\n                \"featureType\": \"administrative.land_parcel\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#ae9e90\"\n                }]\n            },\n            {\n                \"featureType\": \"landscape.natural\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"poi\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"poi\",\n                \"elementType\": \"labels\",\n                \"stylers\": [{\n                    \"visibility\": \"off\"\n                }]\n            },\n            {\n                \"featureType\": \"poi\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#f23702\"\n                }]\n            },\n            {\n                \"featureType\": \"poi.park\",\n                \"elementType\": \"geometry.fill\",\n                \"stylers\": [{\n                    \"color\": \"#a5b076\"\n                }]\n            },\n            {\n                \"featureType\": \"poi.park\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#447530\"\n                }]\n            },\n            {\n                \"featureType\": \"road\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#f5f1e6\"\n                }]\n            },\n            {\n                \"featureType\": \"road.arterial\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#fdfcf8\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#f8c967\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#e9bc62\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway.controlled_access\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#e98d58\"\n                }]\n            },\n            {\n                \"featureType\": \"road.highway.controlled_access\",\n                \"elementType\": \"geometry.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#db8555\"\n                }]\n            },\n            {\n                \"featureType\": \"road.local\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#806b63\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.line\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.line\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#8f7d77\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.line\",\n                \"elementType\": \"labels.text.stroke\",\n                \"stylers\": [{\n                    \"color\": \"#ebe3cd\"\n                }]\n            },\n            {\n                \"featureType\": \"transit.station\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [{\n                    \"color\": \"#dfd2ae\"\n                }]\n            },\n            {\n                \"featureType\": \"water\",\n                \"elementType\": \"geometry.fill\",\n                \"stylers\": [{\n                    \"color\": \"#b9d3c2\"\n                }]\n            },\n            {\n                \"featureType\": \"water\",\n                \"elementType\": \"labels.text.fill\",\n                \"stylers\": [{\n                    \"color\": \"#92998d\"\n                }]\n            }\n        ]\n    }\n\n\n\n    map = new google.maps.Map(document.querySelector('#map'), options);\n\n    // sets parameters for places service search\n    //      center of search coordinates\n    //      radius of the search in meters\n    //      type of establishment to search for\n    const request = {\n        location: location.coords,\n        radius: '750',\n        type: 'hair_care'\n    };\n\n    infowindow = new google.maps.InfoWindow();\n    let service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, hairCarePlaces);\n\n}\n\n\n// this function proccesses the results of our places search\nfunction hairCarePlaces(results, status, pagination) {\n    console.log(\"results\", results, status);\n\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (let i = 0; i < results.length; i++) {\n            // let place = results[i];\n            createMarker(results[i]);\n          }\n        // pagination is google way of limiting search results\n        // default is 20, but more are requested if this request is sent.\n\n        if (pagination.hasNextPage === true) {\n            console.log(\"has next page available\");\n            // this runs the callback function again with the next set of results\n            // max 2 additional pages of results. total 60 results.\n            pagination.nextPage();\n        }\n    }\n}\n\n\nfunction createMarker(place) {\n    // let placeLoc = place.geometry.location;\n\n    //set the icon image and size preferences\n    const iconImage = {\n        url: 'http://maps.google.com/mapfiles/kml/shapes/salon.png',\n        scaledSize: new google.maps.Size(35, 35)\n    };\n\n    //create a marker\n    let marker = new google.maps.Marker({\n        map: map,\n        position: place.geometry.location,\n        icon: iconImage\n    });\n\n\n    //instill each info window with content and the abitlity to open upon click event\n    google.maps.event.addListener(marker, 'click', function() {\n        //info window content\n        infowindow.setContent(place.name);\n        infowindow.open(map, this);\n    });\n}\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });